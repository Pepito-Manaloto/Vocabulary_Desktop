/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on 12 21, 11, 6:26:00 PM
 */
package main.view;

import java.awt.CardLayout;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.sql.SQLException;
import java.text.Collator;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import main.model.*;

/**
 *
 * @author Aaron
 */
public final class MainFrame extends javax.swing.JFrame
{
    private CardLayout cardLayout = new CardLayout();
    private ViewPanel view = null;
    private AddPanel add = null;
    private JTextField searchTextField;
    private VocabularyRecord vRecord = null;
    
    private static String selectedForeignLanguage = ForeignLanguage.HOKKIEN.toString();
    private final static ApplicationLock appLock = new ApplicationLock();      

    /**
     Sets up the background image, Layout, and actionListeners.  
     */        
    public MainFrame() 
    {   
        try
        {
            this.vRecord = new VocabularyRecord();
        }catch(SQLException ex)
        {
            System.out.println(ex);
        }
        MainFrame.appLock.lockApplication("Vocabulary is already running.");
        Runtime.getRuntime().addShutdownHook(new ShutDownHookHandler(MainFrame.appLock, this.vRecord));         

        this.setIconImage( new ImageIcon(getClass().getResource("/images/icon.png")).getImage() );

        this.initComponents();
        this.setSize(855,560);
   
        this.view = new ViewPanel(this.vRecord); 
        this.add = new AddPanel(this.vRecord);

        this.mainPanel.setLayout(this.cardLayout); 
        this.mainPanel.add(add, "Add");
        this.mainPanel.add(view, "View");
        
        this.searchTextField.setVisible(false);    
        this.suggestListScrollPane.setVisible(false); 

        for(ForeignLanguage language: ForeignLanguage.values())
        {
            this.foreignLanguageComboBox.addItem(language);
        }
        
        this.addListeners();
    }

    /**
     Returns the selected language.
     
     @return a String.
     */
    public static String getforeignLanguage()
    {
        return selectedForeignLanguage;
    }
    
    // adds event listener to all mainFrame's component.
    private void addListeners()
    {   
        this.addButton.addActionListener(new ActionListener()    
            {
                @Override
                public void actionPerformed(ActionEvent e)
                {
                    MainFrame.this.cardLayout.show(MainFrame.this.mainPanel, "Add");
                    MainFrame.this.searchTextField.setVisible(false); 

                    MainFrame.this.suggestListScrollPane.setVisible(false); 
                }
            });
        
        this.viewButton.addActionListener(new ActionListener()    
            {
                @Override
                public void actionPerformed(ActionEvent e)
                {
                    MainFrame.this.cardLayout.show(MainFrame.this.mainPanel, "View");
                    MainFrame.this.searchTextField.setVisible(true); 

                    MainFrame.this.view.refreshTable();
                }
            });

        this.foreignLanguageComboBox.addActionListener(new ActionListener()
            {
                @Override
                public void actionPerformed(ActionEvent e)
                {
                    MainFrame.this.add.setLanguageLabel( MainFrame.this.foreignLanguageComboBox.getSelectedItem().toString() );
                    MainFrame.this.view.changeSecondColumnHeaderName( MainFrame.this.foreignLanguageComboBox.getSelectedItem().toString() );

                    selectedForeignLanguage =  MainFrame.this.foreignLanguageComboBox.getSelectedItem().toString(); 

                    MainFrame.this.view.refreshTable();
                }
            });  
        
        this.suggestionList.addMouseListener(new SuggestionListListener());
        this.suggestionList.addMouseMotionListener(new SuggestionListListener()); 
        
        this.searchTextField.addKeyListener(new SearchTextFieldListener());
        this.searchTextField.addCaretListener(new SearchTextFieldListener());
        this.searchTextField.addFocusListener(new SearchTextFieldListener());
        
        this.backupButton.addActionListener(new BackupListener()); 
    }
    
    /**
     Initializes all GUI. Generated by NetBeans.      
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        addButton = new javax.swing.JButton();
        viewButton = new javax.swing.JButton();
        suggestListScrollPane = new javax.swing.JScrollPane();
        suggestionList = new javax.swing.JList();
        foreignLanguageComboBox = new javax.swing.JComboBox();
        backupButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        mainPanel = new javax.swing.JPanel();
        background = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Vocabulary");
        setResizable(false);
        getContentPane().setLayout(null);

        addButton.setText("Add");
        addButton.setBounds(40, 40, 110, 60);
        jLayeredPane1.add(addButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        viewButton.setText("View");
        viewButton.setBounds(40, 140, 110, 60);
        jLayeredPane1.add(viewButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        suggestionList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        suggestListScrollPane.setViewportView(suggestionList);

        suggestListScrollPane.setBounds(10, 330, 170, 120);
        jLayeredPane1.add(suggestListScrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        foreignLanguageComboBox.setBounds(40, 240, 110, 20);
        jLayeredPane1.add(foreignLanguageComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);
        try
        {
            URL url = MainFrame.class.getResource("/images/search_icon.png");
            final BufferedImage searchIcon = ImageIO.read(url);
            searchTextField = new javax.swing.JTextField()
            {
                protected void paintComponent(Graphics g)
                {
                    super.paintComponent(g);
                    int y = (getHeight() - searchIcon.getHeight())/2;
                    g.drawImage(searchIcon, 1, y, this);
                }
            };
            searchTextField.setMargin(new Insets(0, searchIcon.getWidth(), 0, 0));
        }catch(IOException e){}
        searchTextField.setBounds(10, 305, 170, 25);
        jLayeredPane1.add(searchTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        backupButton.setFont(ViewManager.ARIAL12);
        backupButton.setText("Create Backup");
        backupButton.setBounds(30, 360, 130, 23);
        jLayeredPane1.add(backupButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setBounds(200, 0, 10, 510);
        jLayeredPane1.add(jSeparator1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        mainPanel.setOpaque(false);
        mainPanel.setLayout(null);
        mainPanel.setBounds(200, 0, 650, 510);
        jLayeredPane1.add(mainPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/background.png"))); // NOI18N
        background.setBounds(0, 0, 850, 510);
        jLayeredPane1.add(background, javax.swing.JLayeredPane.DEFAULT_LAYER);

        getContentPane().add(jLayeredPane1);
        jLayeredPane1.setBounds(0, 0, 851, 510);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Suggestion list mouse listener class.
     */
    private class SuggestionListListener extends MouseAdapter
    {
        /**
          Highlights the text in the suggestion field where the mouse is pointing at.
          @param e mouse event
        */
        @Override
        public void mouseMoved(MouseEvent e)
        {
            int index = MainFrame.this.suggestionList.locationToIndex( e.getPoint() ); // get the index of the word in the list where the pointer is pointing

            MainFrame.this.suggestionList.setSelectedIndex(index); 
        }
        
        /**
          Gets the selected text from the suggestion list and replace the text in search bar.
          @param e mouse event
        */
        @Override
        public void mouseReleased(MouseEvent e)
        {
            if( MainFrame.this.suggestionList.getSelectedValue() != null )
            {
                MainFrame.this.searchTextField.setText( MainFrame.this.suggestionList.getSelectedValue().toString() );
                
                MainFrame.this.requestFocusInWindow();
            }              
        }
    }
    
    /**
     * Search textfield 
     */
    private class SearchTextFieldListener extends KeyAdapter implements CaretListener, FocusListener
    {
        public static final int SUGGESTION_LIST_ROW_HEIGHT = 17;
        
        /**
          Suggests words similar to currently typed text.
          @param e caret event
        */
        @Override
        public void caretUpdate(CaretEvent e)
        {
            if( MainFrame.this.searchTextField.getText().isEmpty() )
            {
                MainFrame.this.suggestListScrollPane.setVisible(false);
            } 
            else
            {                               
                String searchedWord = MainFrame.this.searchTextField.getText().toLowerCase();

                MainFrame.this.suggestListScrollPane.setVisible(true); 

                MainFrame.this.suggestionList.setListData( this.getSuggestedList(searchedWord) ); // fills the suggestion box

                // only one suggested text left and a row is highlighted in the table.
                if( MainFrame.this.suggestionList.getModel().getSize() <= 1 && 
                    MainFrame.this.view.getVocabularyTable().getSelectedRow() >= 0 )
                {
                    MainFrame.this.suggestListScrollPane.setVisible(false);
                } 
                else // automatically change suggestion list height depending on number of data.
                {   
                    if( (MainFrame.this.suggestionList.getModel().getSize() * SUGGESTION_LIST_ROW_HEIGHT) > 119 ) // 17.2 is the height of each row       
                    {
                        MainFrame.this.suggestListScrollPane.setSize(170, 122); // default 7 rows
                    }
                    else
                    {
                        MainFrame.this.suggestListScrollPane.setSize(170, (MainFrame.this.suggestionList.getModel().getSize() * SUGGESTION_LIST_ROW_HEIGHT) + 3 );
                    }
                    
                    MainFrame.this.suggestListScrollPane.setVisible(true);
   
                    if(searchedWord.length() <= 1)
                    {
                        // deselects selected row/s in the table.
                        MainFrame.this.view.getVocabularyTable().removeRowSelectionInterval(0, MainFrame.this.view.getVocabularyTable().getRowCount() - 1);
                    }
                } 
            }
        }
        
        private Object[] getSuggestedList(final String keyWord)
        {
            int numOfRows = MainFrame.this.view.getVocabularyTable().getRowCount();
            List<String> suggestions = new ArrayList<>();
            
            String englishColumn[] = null;
            String foreignColumn[] = null;
            int i;
            
            for(i = 0; i < numOfRows; i++)
            {
                if(keyWord.equals("")) 
                {
                    break;
                }

                englishColumn = MainFrame.this.view.getVocabularyTable().getValueAt(i, 0).toString().split("/");
                foreignColumn = MainFrame.this.view.getVocabularyTable().getValueAt(i, 1).toString().split("/");

                for(String englishWord: englishColumn)
                {
                    englishWord = englishWord.trim();
                    
                    if( englishWord.startsWith(keyWord) )
                    {
                        suggestions.add(englishWord);
                    }
                    
                    if(englishWord.equalsIgnoreCase(keyWord))
                    {
                        MainFrame.this.view.getVocabularyTable().changeSelection(i, 0, false, false);
                        break;
                    }   
                }
                
                for(String foreignWord: foreignColumn)
                {
                    foreignWord = foreignWord.trim();
                    
                    if( foreignWord.trim().startsWith(keyWord) )
                    {
                        suggestions.add(foreignWord);
                    }
                    
                    if(foreignWord.trim().equalsIgnoreCase(keyWord))
                    {
                        MainFrame.this.view.getVocabularyTable().changeSelection(i, 0, false, false);
                        break;
                    } 
                }
            }   

            // sorts the list including accented characters
            Collator collator = Collator.getInstance(Locale.US);
            Collections.sort(suggestions, collator);
            
            return suggestions.toArray();
        }
        
        /**
          Moves selected word in suggest list via up-down arrow keys and enter key.
          @param e key event
        */
        @Override
        public void keyPressed(KeyEvent e)
        {           
            int keycode = e.getKeyCode();
            int selectedIndex = MainFrame.this.suggestionList.getSelectedIndex();

            if( keycode == KeyEvent.VK_UP )
            {                     
                if( selectedIndex > -1 ) // there is a selected word in the list.
                {
                    if( selectedIndex  == 0 ) //if at the beginning of the list, move back to end.  
                    {
                        MainFrame.this.suggestionList.setSelectedIndex(MainFrame.this.suggestionList.getModel().getSize() - 1);
                        MainFrame.this.suggestionList.ensureIndexIsVisible(MainFrame.this.suggestionList.getModel().getSize() - 1); 
                    }               
                    else
                    {
                        MainFrame.this.suggestionList.setSelectedIndex(selectedIndex - 1);
                        MainFrame.this.suggestionList.ensureIndexIsVisible(selectedIndex - 1); 
                    }             
                }
                else
                {
                    MainFrame.this.suggestionList.setSelectedIndex(MainFrame.this.suggestionList.getModel().getSize() - 1);
                    MainFrame.this.suggestionList.ensureIndexIsVisible(MainFrame.this.suggestionList.getModel().getSize() - 1); 
                } 

            }
            else if( keycode == KeyEvent.VK_DOWN )
            {
                if( selectedIndex > -1 ) // there is a selected word in the list.
                {
                    if( selectedIndex  == MainFrame.this.suggestionList.getModel().getSize() - 1 ) //if at the end of the list, move back to beginning.
                    {
                        MainFrame.this.suggestionList.setSelectedIndex(0);
                        MainFrame.this.suggestionList.ensureIndexIsVisible(0); 
                    } 
                    else
                    {
                        MainFrame.this.suggestionList.setSelectedIndex(selectedIndex + 1);
                        MainFrame.this.suggestionList.ensureIndexIsVisible(selectedIndex + 1); 
                    } 
                }
                else
                {
                    MainFrame.this.suggestionList.setSelectedIndex(0);
                    MainFrame.this.suggestionList.ensureIndexIsVisible(0); 
                }
            }
            else if( keycode == KeyEvent.VK_ENTER )
            {
                if( MainFrame.this.suggestionList.getSelectedValue() != null )
                {
                    MainFrame.this.searchTextField.setText( MainFrame.this.suggestionList.getSelectedValue().toString() );
                } 
            } 
        }

        @Override
        public void focusGained(FocusEvent e)
        {}
              
        /**
          Action event for search textfield. Hides suggestion list if not focused on textfield.
          @param e focus event
        */
        @Override
        public void focusLost(FocusEvent e)
        {
            MainFrame.this.suggestListScrollPane.setVisible(false);
        }
    }
    
    private class BackupListener implements ActionListener
    {
        @Override
        public void actionPerformed(ActionEvent e)
        {
            DateFormat dateFormat = new SimpleDateFormat("MMMM dd, yyyy");
            Calendar cal = Calendar.getInstance();
            String currentDate = dateFormat.format(cal.getTime());
            String backupScript = "mysqldump --routines -uroot -p10906657 --add-drop-database -B my_vocabulary -r \"my_vocabulary (" + currentDate + ").sql\"";
            String path = "C://Users//Aaron//Desktop";
            
            CommandLineScript cmdScript = new CommandLineScript();
            boolean result = cmdScript.execute(backupScript, path);

            if(true == result)
            {
                JOptionPane.showMessageDialog(MainFrame.this, "Backup created successfully", "", JOptionPane.INFORMATION_MESSAGE);
            }    
            else
            {
                JOptionPane.showMessageDialog(MainFrame.this, cmdScript.getErrorMessage(), "", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel background;
    private javax.swing.JButton backupButton;
    private javax.swing.JComboBox foreignLanguageComboBox;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JScrollPane suggestListScrollPane;
    private javax.swing.JList suggestionList;
    private javax.swing.JButton viewButton;
    // End of variables declaration//GEN-END:variables
}
