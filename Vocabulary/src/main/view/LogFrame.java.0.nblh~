/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package main.view;

import java.awt.Color;
import java.io.IOException;
import java.util.HashMap;
import javax.swing.text.*;
import main.model.LogManager;
import main.model.LogManager.LogLevel;
/**
 *
 * @author Aaron
 */
public class LogFrame extends javax.swing.JFrame
{
    private LogManager logger = LogManager.getInstance();

    private static final Color FOREST_GREEN = new Color(34, 139, 34);
    private static final Color ROYAL_BLUE = new Color(65, 105, 225); 
    private static final Color DARK_ORANGE = new Color(255,140,0 );
    private static final Color CRIMSON = new Color(220, 20, 60);
    private static final Color DARK_RED = new Color(139, 0, 0);
    /**
     * Creates new form LogFrame.
     */
    public LogFrame()
    {
        initComponents();
        fillLog();
    }
    
    private void fillLog()
    {
        StyleContext context = new StyleContext();
        StyledDocument document = new DefaultStyledDocument(context);
        Style style = context.getStyle(StyleContext.DEFAULT_STYLE);
    
        try 
        {
            StyleConstants.setFontFamily(style, "arial");
            StyleConstants.setFontSize(style, 12);
            StyleConstants.setBold(style, true);
            StyleConstants.setSpaceAbove(style, 1);

            StyleConstants.setLineSpacing(style, 1);
            HashMap<String, LogLevel> logMessages = this.logger.getMessageLogFromFile("Vocabulary.log");
                    
            for(String message: logMessages.keySet())
            {
                switch(logMessages.get(message))
                {
                    case DEBUG: 
                        StyleConstants.setForeground(style, FOREST_GREEN);
                        break;
                    case INFO:
                        StyleConstants.setForeground(style, ROYAL_BLUE);
                        break;
                    case WARN:
                        StyleConstants.setForeground(style, DARK_ORANGE);
                        break;
                    case ERROR:
                        StyleConstants.setForeground(style, CRIMSON);
                        break;    
                    case FATAL:
                        StyleConstants.setForeground(style, DARK_RED);
                }
                
                document.insertString(document.getLength(), message + "\n", style);
            }  
            
            logTextPane.setStyledDocument(document);
        } 
        catch (IOException | BadLocationException ex) 
        {
            this.logger.error(ex.getMessage());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        logScrollPane = new javax.swing.JScrollPane();
        logTextPane = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Message Log");
        setPreferredSize(new java.awt.Dimension(1195, 700));
        setResizable(false);
        getContentPane().setLayout(null);

        logTextPane.setEditable(false);
        logScrollPane.setViewportView(logTextPane);

        getContentPane().add(logScrollPane);
        logScrollPane.setBounds(20, 20, 1150, 560);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane logScrollPane;
    private javax.swing.JTextPane logTextPane;
    // End of variables declaration//GEN-END:variables
}
